{
  "name": "file-system",
  "version": "2.2.1",
  "description": "Strengthen the ability of file system",
  "main": "file-system.js",
  "scripts": {
    "test": "mocha test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/douzi8/file-system"
  },
  "keywords": [
    "file",
    "recursive",
    "recurse",
    "fs",
    "maker",
    "node file",
    "mkdir",
    "rmdir"
  ],
  "author": {
    "name": "douzi",
    "email": "liaowei08@gmail.com"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/douzi8/file-system/issues"
  },
  "homepage": "https://github.com/douzi8/file-system",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.10.0",
    "mocha": "^2.0.1"
  },
  "dependencies": {
    "file-match": "^1.0.1",
    "utils-extend": "^1.0.4"
  },
  "readme": "# file-system â€” Simplified file system\n[![NPM](https://nodei.co/npm/file-system.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/file-system/)\n\nThis module make file opertaion apis simple, you don't need to care the dir exits. and the api is same as node's filesystem. This is no exists time cost for this plugin.  \n```js\nvar fs = require('file-system');\n\nfs.mkdir('1/2/3/4/5', [mode], function(err) {});\nfs.mkdirSync('1/2/3/4/5', [mode]);\nfs.writeFile('path/test.txt', 'aaa', function(err) {})\n```\n\n### install\n```\nnpm install file-system --save\n```\n\n## API\n### .fs\nfile extend node fs origin methods, and overwrite some methods with next list chart\n```js\nvar file = require('file-system');\nvar fs = require('fs');\n\nfile.readFile === fs.readFile // true\n```\n\n### .mkdir\nThe api is same as node's mkdir\n\n### .mkdirSync\nThe api is same as node's mkdir\n\n### .writeFile\nThe api is same as node's writeFile\n\n### .writeFileSync\nThe api is same as node's writeFile\n\n### .fileMatch\nThe api equal [file-match](https://github.com/douzi8/file-match)\n      \n### .copyFile(srcpath, destpath, options)\nAsynchronously copy a file into newpath\n* {string} ``srcpath`` required\n* {string} ``destpath`` required\n* {object} ``options``\n  * {string} ``options.encoding`` [options.encoding=utf8]\n  * {function} ``options.done(err)``\n  * {function} ``options.process(content)``  \n  The process argument must return processed content\n```js\nfs.copyFile('deom.png', 'dest/demo.png', {\n  done: function(err) {\n    console.log('done');\n  }\n});\n```\n\n### .copyFileSync(srcpath, destpath, options)\nThe api same as copyFile, but it's synchronous\n```js\nfs.copyFileSync('demo.png', 'dest/demo.png');\nfs.copyFileSync('demo.css', 'dest/demo.css', {\n  process: function(contents) {\n    return contents;\n  }\n})\n```\n\n### .recurse(dirpath, filter, callback)\nRecurse into a directory, executing callback for each file and folder.\nif the filename is undefiend, the callback is for folder, otherwise for file.\n* {string} ``dirpath`` required\n* {string|array|function} ``filter``  \nIf the filter is function, executing callback for all files and folder \n* {function} ``callback(filepath, filename, relative)``\n```js\nfs.recurse('path', function(filepath, relative, filename) { });\n\nfs.recurse('path', [\n  '*.css',\n  '**/*.js', \n  'path/*.html',\n  '!**/path/*.js'\n], function(filepath, relative, filename) {  \n  if (filename) {\n  // it's file\n  } else {\n  // it's folder\n  }\n});\n\n//  Only using files\nfs.recurse('path', function(filepath, relative, filename) {  \n  if (!filename) return;\n});\n```\n[filter params description](https://github.com/douzi8/file-match#filter-description)\n\n### .recurseSync(dirpath, filter, callback)\nThe api is same as recurse, but it is synchronous\n```js\nfs.recurseSync('path', function(filepath, relative, filename) {\n  \n});\n\nfs.recurseSync('path', ['**/*.js', 'path/**/*.html'], function(filepath, relative, filename) {\n  \n});\n```\n\n### .rmdirSync(dirpath)\nRecurse into a directory, remove all of the files and folder in this directory.\n```js\nfs.rmdirSync('path');\n```\n\n### .copySync(dirpath, destpath, options)\nRecurse into a directory, copy all files into dest.\n* {string} ``dirpath`` required\n* {string} ``destpath`` required\n* {object} ``options``\n  * {string|array} ``options.filter``\n  * {function} ``options.process(contents, filepath, relative)``  \n  If custom the destpath, return object, otherwise return content\n  * {string|array} ``options.noProcess``\n```js\nfs.copySync('path', 'dest', { clear: true });\n\nfs.copySync('src', 'dest/src');\n\nfs.copySync('src', 'dest/src', { filter: ['*.js', 'path/**/*.css'] });\n\nfs.copySync('path', 'dest', { \n  noProcess: '**/*.{jpg, png}',            // Don't process images\n  process: function(contents, filepath, relative) {\n    // only process file content\n    return contents;\n    // or custom destpath\n    return {\n      contents: '',\n      filepath: ''\n    };\n  } \n});\n\n//Handler self files\nfs.copySync('path', 'path', { filter: ['*.html.js'], process: function(contents, filepath) {} });\n```\n\n### .base64\nDeprecated, move to [base64](https://github.com/douzi8/base64-img#base64filename-callback)\n### .base64Sync\nDeprecated, move to [base64Sync](https://github.com/douzi8/base64-img#base64syncfilename)",
  "readmeFilename": "README.md",
  "_id": "file-system@2.2.1",
  "dist": {
    "shasum": "8cfbf142b8173ec690efd21e0d803a83eda87199"
  },
  "_from": "file-system@^2.1.1",
  "_resolved": "https://registry.npmjs.org/file-system/-/file-system-2.2.1.tgz"
}
